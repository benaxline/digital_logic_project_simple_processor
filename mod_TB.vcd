$date
	Tue May 23 16:49:38 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module mod_TB $end
$var wire 3 ! bus [2:0] $end
$var wire 3 " g [2:0] $end
$var wire 3 # temp1 [2:0] $end
$var wire 3 $ t7 [2:0] $end
$var wire 3 % t6 [2:0] $end
$var wire 3 & t5 [2:0] $end
$var wire 3 ' t4 [2:0] $end
$var wire 3 ( t3 [2:0] $end
$var wire 3 ) t2 [2:0] $end
$var wire 3 * t1 [2:0] $end
$var wire 3 + t0 [2:0] $end
$var wire 8 , reg_out [7:0] $end
$var wire 8 - reg_in [7:0] $end
$var wire 7 . math_out [6:0] $end
$var wire 1 / g_out $end
$var wire 1 0 g_in $end
$var wire 1 1 data_out $end
$var wire 5 2 current_state [4:0] $end
$var wire 3 3 a_out [2:0] $end
$var wire 1 4 a_in $end
$var wire 1 5 AddSub $end
$var reg 1 6 clk $end
$var reg 5 7 count [4:0] $end
$var reg 4 8 func [3:0] $end
$var reg 3 9 in1 [2:0] $end
$var reg 3 : in2 [2:0] $end
$scope module A $end
$var wire 1 6 clk $end
$var wire 3 ; x [2:0] $end
$var wire 1 4 enable $end
$var reg 3 < y [2:0] $end
$upscope $end
$scope module D $end
$var wire 3 = a [2:0] $end
$var wire 1 1 enable $end
$var reg 3 > b [2:0] $end
$upscope $end
$scope module G $end
$var wire 1 6 clk $end
$var wire 3 ? x [2:0] $end
$var wire 1 0 enable $end
$var reg 3 @ y [2:0] $end
$upscope $end
$scope module R0 $end
$var wire 1 6 clk $end
$var wire 1 A enable $end
$var wire 3 B x [2:0] $end
$var reg 3 C y [2:0] $end
$upscope $end
$scope module R1 $end
$var wire 1 6 clk $end
$var wire 1 D enable $end
$var wire 3 E x [2:0] $end
$var reg 3 F y [2:0] $end
$upscope $end
$scope module R2 $end
$var wire 1 6 clk $end
$var wire 1 G enable $end
$var wire 3 H x [2:0] $end
$var reg 3 I y [2:0] $end
$upscope $end
$scope module R3 $end
$var wire 1 6 clk $end
$var wire 1 J enable $end
$var wire 3 K x [2:0] $end
$var reg 3 L y [2:0] $end
$upscope $end
$scope module R4 $end
$var wire 1 6 clk $end
$var wire 1 M enable $end
$var wire 3 N x [2:0] $end
$var reg 3 O y [2:0] $end
$upscope $end
$scope module R5 $end
$var wire 1 6 clk $end
$var wire 1 P enable $end
$var wire 3 Q x [2:0] $end
$var reg 3 R y [2:0] $end
$upscope $end
$scope module R6 $end
$var wire 1 6 clk $end
$var wire 1 S enable $end
$var wire 3 T x [2:0] $end
$var reg 3 U y [2:0] $end
$upscope $end
$scope module R7 $end
$var wire 1 6 clk $end
$var wire 1 V enable $end
$var wire 3 W x [2:0] $end
$var reg 3 X y [2:0] $end
$upscope $end
$scope module T0 $end
$var wire 3 Y a [2:0] $end
$var wire 1 Z enable $end
$var reg 3 [ b [2:0] $end
$upscope $end
$scope module T1 $end
$var wire 3 \ a [2:0] $end
$var wire 1 ] enable $end
$var reg 3 ^ b [2:0] $end
$upscope $end
$scope module T2 $end
$var wire 3 _ a [2:0] $end
$var wire 1 ` enable $end
$var reg 3 a b [2:0] $end
$upscope $end
$scope module T3 $end
$var wire 3 b a [2:0] $end
$var wire 1 c enable $end
$var reg 3 d b [2:0] $end
$upscope $end
$scope module T4 $end
$var wire 3 e a [2:0] $end
$var wire 1 f enable $end
$var reg 3 g b [2:0] $end
$upscope $end
$scope module T5 $end
$var wire 3 h a [2:0] $end
$var wire 1 i enable $end
$var reg 3 j b [2:0] $end
$upscope $end
$scope module T6 $end
$var wire 3 k a [2:0] $end
$var wire 1 l enable $end
$var reg 3 m b [2:0] $end
$upscope $end
$scope module T7 $end
$var wire 3 n a [2:0] $end
$var wire 1 o enable $end
$var reg 3 p b [2:0] $end
$upscope $end
$scope module alu $end
$var wire 1 q AddSub $end
$var wire 3 r g [2:0] $end
$var wire 3 s p [2:0] $end
$var wire 3 t q [2:0] $end
$var wire 3 u xor_out [2:0] $end
$var wire 3 v sub_out [2:0] $end
$var wire 3 w or_out [2:0] $end
$var wire 3 x mod_out [2:0] $end
$var wire 7 y math_out [6:0] $end
$var wire 3 z divide_out [2:0] $end
$var wire 3 { and_out [2:0] $end
$var wire 3 | add_out [2:0] $end
$scope module addme $end
$var wire 3 } a [2:0] $end
$var wire 1 q addsub $end
$var wire 3 ~ b [2:0] $end
$var wire 1 !" t $end
$var wire 3 "" out [2:0] $end
$upscope $end
$scope module addtri $end
$var wire 3 #" a [2:0] $end
$var wire 1 $" enable $end
$var reg 3 %" b [2:0] $end
$upscope $end
$scope module andme $end
$var wire 3 &" a [2:0] $end
$var wire 3 '" b [2:0] $end
$var wire 3 (" g [2:0] $end
$upscope $end
$scope module andtri $end
$var wire 3 )" a [2:0] $end
$var wire 1 *" enable $end
$var reg 3 +" b [2:0] $end
$upscope $end
$scope module divme $end
$var wire 3 ," dividend [2:0] $end
$var wire 3 -" divisor [2:0] $end
$var wire 3 ." remainder [2:0] $end
$var wire 3 /" quotient [2:0] $end
$upscope $end
$scope module divtri $end
$var wire 3 0" a [2:0] $end
$var wire 1 1" enable $end
$var reg 3 2" b [2:0] $end
$upscope $end
$scope module modtri $end
$var wire 3 3" a [2:0] $end
$var wire 1 4" enable $end
$var reg 3 5" b [2:0] $end
$upscope $end
$scope module my_xor $end
$var wire 3 6" a [2:0] $end
$var wire 3 7" b [2:0] $end
$var wire 3 8" g [2:0] $end
$upscope $end
$scope module orme $end
$var wire 3 9" a [2:0] $end
$var wire 3 :" b [2:0] $end
$var wire 3 ;" g [2:0] $end
$upscope $end
$scope module ortri $end
$var wire 3 <" a [2:0] $end
$var wire 1 =" enable $end
$var reg 3 >" b [2:0] $end
$upscope $end
$scope module subme $end
$var wire 3 ?" a [2:0] $end
$var wire 3 @" b [2:0] $end
$var wire 3 A" out [2:0] $end
$upscope $end
$scope module subtri $end
$var wire 3 B" a [2:0] $end
$var wire 1 C" enable $end
$var reg 3 D" b [2:0] $end
$upscope $end
$scope module xortri $end
$var wire 3 E" a [2:0] $end
$var wire 1 F" enable $end
$var reg 3 G" b [2:0] $end
$upscope $end
$upscope $end
$scope module cc $end
$var wire 1 6 clk $end
$var wire 4 H" func [3:0] $end
$var wire 3 I" input1 [2:0] $end
$var wire 3 J" input2 [2:0] $end
$var wire 8 K" temp2 [7:0] $end
$var wire 8 L" temp1 [7:0] $end
$var wire 9 M" temp [8:0] $end
$var wire 5 N" current_state [4:0] $end
$var reg 1 5 AddSub $end
$var reg 8 O" R_in [7:0] $end
$var reg 8 P" R_out [7:0] $end
$var reg 1 4 a_in $end
$var reg 1 1 data_out $end
$var reg 1 0 g_in $end
$var reg 1 / g_out $end
$var reg 7 Q" math_enables [6:0] $end
$var reg 5 R" next_state [4:0] $end
$scope module in1 $end
$var wire 1 6 clk $end
$var wire 3 S" reg_num [2:0] $end
$var reg 8 T" reg_enable [7:0] $end
$upscope $end
$scope module in2 $end
$var wire 1 6 clk $end
$var wire 3 U" reg_num [2:0] $end
$var reg 8 V" reg_enable [7:0] $end
$upscope $end
$upscope $end
$scope module g_buf $end
$var wire 3 W" a [2:0] $end
$var wire 1 / enable $end
$var reg 3 X" b [2:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bz X"
bx W"
b100 V"
b101 U"
b10000000 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b100000 M"
b10000000 L"
b100 K"
b101 J"
b0 I"
b1 H"
bz G"
0F"
bx E"
bz D"
0C"
bx B"
bx A"
bz @"
bx ?"
bz >"
0="
bx <"
bx ;"
bz :"
bx 9"
bx 8"
bz 7"
bx 6"
bz 5"
04"
bx 3"
bz 2"
01"
bx 0"
bx /"
bx ."
bz -"
bx ,"
bz +"
0*"
bx )"
bx ("
bz '"
bx &"
bz %"
0$"
bx #"
bx ""
0!"
bz ~
bx }
bx |
bx {
bx z
b0 y
bx x
bx w
bx v
bx u
bz t
bx s
bz r
zq
bz p
0o
bx n
bz m
0l
bx k
bz j
0i
bx h
bz g
0f
bx e
bz d
0c
bx b
bz a
0`
bx _
bz ^
0]
bx \
bz [
0Z
bx Y
bx X
bz W
0V
bx U
bz T
0S
bx R
bz Q
0P
bx O
bz N
0M
bx L
bz K
0J
bx I
bz H
0G
bx F
bz E
0D
bx C
bz B
0A
bx @
bz ?
bz >
b101 =
bx <
bz ;
b101 :
b0 9
b1 8
b0 7
16
05
04
bx 3
b0 2
01
00
0/
b0 .
b0 -
b0 ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bz "
bz !
$end
#50000
b101 +
b101 C
b101 Y
bx0x {
bx0x ("
bx0x )"
b1x1 w
b1x1 ;"
b1x1 <"
1A
b101 !
b101 ;
b101 B
b101 E
b101 H
b101 K
b101 N
b101 Q
b101 T
b101 W
b101 t
b101 ~
b101 '"
b101 -"
b101 7"
b101 :"
b101 @"
b101 >
b10000000 -
b10000000 O"
11
b100001 M"
b1 2
b1 N"
b1 R"
06
b1 7
#100000
0A
b0 -
b0 O"
bx {
bx ("
bx )"
bx w
bx ;"
bx <"
bz !
bz ;
bz B
bz E
bz H
bz K
bz N
bz Q
bz T
bz W
bz t
bz ~
bz '"
bz -"
bz 7"
bz :"
bz @"
bz >
01
b100000 M"
b0 2
b0 N"
b0 R"
b1000 L"
b1000 T"
b100 9
b100 I"
b100 S"
16
b10 7
#150000
b101 '
b101 O
b101 e
bx0x {
bx0x ("
bx0x )"
b1x1 w
b1x1 ;"
b1x1 <"
1M
b101 !
b101 ;
b101 B
b101 E
b101 H
b101 K
b101 N
b101 Q
b101 T
b101 W
b101 t
b101 ~
b101 '"
b101 -"
b101 7"
b101 :"
b101 @"
b101 >
b1000 -
b1000 O"
11
b100001 M"
b1 2
b1 N"
b1 R"
06
b11 7
#200000
0M
b0 -
b0 O"
bx {
bx ("
bx )"
bx w
bx ;"
bx <"
bz !
bz ;
bz B
bz E
bz H
bz K
bz N
bz Q
bz T
bz W
bz t
bz ~
bz '"
bz -"
bz 7"
bz :"
bz @"
bz >
01
b100000 M"
b0 2
b0 N"
b0 R"
b1000 K"
b1000 V"
b100000 L"
b100000 T"
b100 :
b100 =
b100 J"
b100 U"
b10 9
b10 I"
b10 S"
16
b100 7
#250000
b100 )
b100 I
b100 _
bx00 {
bx00 ("
bx00 )"
b1xx w
b1xx ;"
b1xx <"
1G
b100 !
b100 ;
b100 B
b100 E
b100 H
b100 K
b100 N
b100 Q
b100 T
b100 W
b100 t
b100 ~
b100 '"
b100 -"
b100 7"
b100 :"
b100 @"
b100 >
b100000 -
b100000 O"
11
b100001 M"
b1 2
b1 N"
b1 R"
06
b101 7
#300000
0G
b0 -
b0 O"
bx {
bx ("
bx )"
bx w
bx ;"
bx <"
bz !
bz ;
bz B
bz E
bz H
bz K
bz N
bz Q
bz T
bz W
bz t
bz ~
bz '"
bz -"
bz 7"
bz :"
bz @"
bz >
01
b100000 M"
b0 2
b0 N"
b0 R"
b1000000 K"
b1000000 V"
b100 L"
b100 T"
b1 :
b1 =
b1 J"
b1 U"
b101 9
b101 I"
b101 S"
16
b110 7
#350000
b1 &
b1 R
b1 h
b0x {
b0x ("
b0x )"
bx1 w
bx1 ;"
bx1 <"
1P
b1 !
b1 ;
b1 B
b1 E
b1 H
b1 K
b1 N
b1 Q
b1 T
b1 W
b1 t
b1 ~
b1 '"
b1 -"
b1 7"
b1 :"
b1 @"
b1 >
b100 -
b100 O"
11
b100001 M"
b1 2
b1 N"
b1 R"
06
b111 7
#400000
0P
b0 -
b0 O"
bx {
bx ("
bx )"
bx w
bx ;"
bx <"
bz !
bz ;
bz B
bz E
bz H
bz K
bz N
bz Q
bz T
bz W
bz t
bz ~
bz '"
bz -"
bz 7"
bz :"
bz @"
bz >
01
b0 2
b0 N"
b0 R"
b100 K"
b100 V"
b10000000 L"
b10000000 T"
b101 :
b101 =
b101 J"
b101 U"
b0 9
b0 I"
b0 S"
b1000000 M"
b10 8
b10 H"
16
b1000 7
#450000
bz +
bz C
bz Y
b0x {
b0x ("
b0x )"
bx1 w
bx1 ;"
bx1 <"
b1 !
b1 ;
b1 B
b1 E
b1 H
b1 K
b1 N
b1 Q
b1 T
b1 W
b1 t
b1 ~
b1 '"
b1 -"
b1 7"
b1 :"
b1 @"
b1 j
1i
1A
b100 ,
b100 P"
b10000000 -
b10000000 O"
b1000010 M"
b10 2
b10 N"
b10 R"
06
b1001 7
#500000
bx {
bx ("
bx )"
bx w
bx ;"
bx <"
bz !
bz ;
bz B
bz E
bz H
bz K
bz N
bz Q
bz T
bz W
bz t
bz ~
bz '"
bz -"
bz 7"
bz :"
bz @"
bz j
0i
0A
b1 +
b1 C
b1 Y
b0 ,
b0 P"
b0 -
b0 O"
b1000000 M"
b0 2
b0 N"
b0 R"
b10000000 K"
b10000000 V"
b100000 L"
b100000 T"
b0 :
b0 =
b0 J"
b0 U"
b10 9
b10 I"
b10 S"
16
b1010 7
#550000
bz )
bz I
bz _
b0x {
b0x ("
b0x )"
bx1 w
bx1 ;"
bx1 <"
b1 !
b1 ;
b1 B
b1 E
b1 H
b1 K
b1 N
b1 Q
b1 T
b1 W
b1 t
b1 ~
b1 '"
b1 -"
b1 7"
b1 :"
b1 @"
b1 [
1Z
1G
b10000000 ,
b10000000 P"
b100000 -
b100000 O"
b1000010 M"
b10 2
b10 N"
b10 R"
06
b1011 7
#600000
bx {
bx ("
bx )"
bx w
bx ;"
bx <"
bz !
bz ;
bz B
bz E
bz H
bz K
bz N
bz Q
bz T
bz W
bz t
bz ~
bz '"
bz -"
bz 7"
bz :"
bz @"
bz [
0Z
0G
b1 )
b1 I
b1 _
b0 ,
b0 P"
b0 -
b0 O"
b0 2
b0 N"
b0 R"
b100 K"
b100 V"
b10000000 L"
b10000000 T"
b101 :
b101 =
b101 J"
b101 U"
b0 9
b0 I"
b0 S"
b100100000 M"
b1001 8
b1001 H"
16
b1100 7
#650000
bz 3
bz <
bz s
bz }
bz &"
bz ,"
bz 6"
bz 9"
bz ?"
b0x {
b0x ("
b0x )"
bx1 w
bx1 ;"
bx1 <"
bx "
bx ?
bx r
bx 5"
b1 !
b1 ;
b1 B
b1 E
b1 H
b1 K
b1 N
b1 Q
b1 T
b1 W
b1 t
b1 ~
b1 '"
b1 -"
b1 7"
b1 :"
b1 @"
b1 [
14"
1Z
b1 .
b1 y
b1 Q"
14
b10000000 ,
b10000000 P"
b100110110 M"
b10110 2
b10110 N"
b10110 R"
06
b1101 7
#700000
b1 {
b1 ("
b1 )"
b0 "
b0 ?
b0 r
b0 5"
b0 u
b0 8"
b0 E"
b1 w
b1 ;"
b1 <"
b10 |
b10 ""
b10 #"
b1 z
b1 /"
b1 0"
b0 x
b0 ."
b0 3"
b0 v
b0 A"
b0 B"
b1 3
b1 <
b1 s
b1 }
b1 &"
b1 ,"
b1 6"
b1 9"
b1 ?"
b1 j
b1 !
b1 ;
b1 B
b1 E
b1 H
b1 K
b1 N
b1 Q
b1 T
b1 W
b1 t
b1 ~
b1 '"
b1 -"
b1 7"
b1 :"
b1 @"
bz [
1i
0Z
10
b100 ,
b100 P"
b100110111 M"
b10111 2
b10111 N"
b10111 R"
16
b1110 7
#750000
bx +
bx C
bx Y
b0 #
b0 @
b0 W"
b0 {
b0 ("
b0 )"
bx "
bx ?
bx r
bx 5"
b1 u
b1 8"
b1 E"
b1 w
b1 ;"
b1 <"
bz j
b1 |
b1 ""
b1 #"
bx z
bx /"
bx 0"
bx x
bx ."
bx 3"
b1 v
b1 A"
b1 B"
b0 !
b0 ;
b0 B
b0 E
b0 H
b0 K
b0 N
b0 Q
b0 T
b0 W
b0 t
b0 ~
b0 '"
b0 -"
b0 7"
b0 :"
b0 @"
b0 X"
0i
1A
1/
04
b0 ,
b0 P"
b10000000 -
b10000000 O"
b100111000 M"
b11000 2
b11000 N"
b11000 R"
06
b1111 7
#800000
0A
b0 +
b0 C
b0 Y
b0 -
b0 O"
bz "
bz ?
bz r
bz 5"
b0x {
b0x ("
b0x )"
bx u
bx 8"
bx E"
bx1 w
bx1 ;"
bx1 <"
04"
bx |
bx ""
bx #"
bx v
bx A"
bx B"
bz !
bz ;
bz B
bz E
bz H
bz K
bz N
bz Q
bz T
bz W
bz t
bz ~
bz '"
bz -"
bz 7"
bz :"
bz @"
bz X"
b0 .
b0 y
b0 Q"
0/
00
b100100000 M"
b0 2
b0 N"
b0 R"
16
b10000 7
#850000
bz 3
bz <
bz s
bz }
bz &"
bz ,"
bz 6"
bz 9"
bz ?"
b0 {
b0 ("
b0 )"
bx u
bx 8"
bx E"
bx w
bx ;"
bx <"
bx "
bx ?
bx r
bx 5"
bx |
bx ""
bx #"
bx v
bx A"
bx B"
b0 !
b0 ;
b0 B
b0 E
b0 H
b0 K
b0 N
b0 Q
b0 T
b0 W
b0 t
b0 ~
b0 '"
b0 -"
b0 7"
b0 :"
b0 @"
b0 [
14"
1Z
b1 .
b1 y
b1 Q"
14
b10000000 ,
b10000000 P"
b100110110 M"
b10110 2
b10110 N"
b10110 R"
06
b10001 7
#900000
b10010 7
#950000
b10011 7
#1000000
b10100 7
